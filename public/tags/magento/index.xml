<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>magento on The Geek Speaks</title>
    <link>https://thegeekspeaks.net/tags/magento/</link>
    <description>Recent content in magento on The Geek Speaks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Feb 2017 21:05:23 +0000</lastBuildDate>
    
	<atom:link href="https://thegeekspeaks.net/tags/magento/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Magento 2 Learning Curve</title>
      <link>https://thegeekspeaks.net/post/2017-02-03-the-magento-2-learning-curve/</link>
      <pubDate>Fri, 03 Feb 2017 21:05:23 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2017-02-03-the-magento-2-learning-curve/</guid>
      <description>The learning curve for various products and platforms tends to vary greatly depending on the complexity of the system you are learning. For example, people that understand how to use the internet and communicate online via email or Facebook are generally able to figure out how to work with Twitter without much of an issue. On the other hand, when you are looking at the learning curve for designing airplanes that are able to carry people, it should be much more difficult to understand how to start as compared to starting to use Twitter.</description>
    </item>
    
    <item>
      <title>The Best Way to Learn Magento 2</title>
      <link>https://thegeekspeaks.net/post/2017-01-25-the-best-way-to-learn-magento-2/</link>
      <pubDate>Wed, 25 Jan 2017 20:05:23 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2017-01-25-the-best-way-to-learn-magento-2/</guid>
      <description>The very best way that I have found to figure out how to develop with Magento 2 is to write unit tests for a module. It not only requires you to figure out how to work with phpunit, but to also look at the existing codebase for examples of how the Magento 2 team works with the same objects and handles the same kinds of tasks. Once I wrote a full set of unit tests for my first Magento 2 module, I felt that I had a much better grasp of the workings of Magento 2 than I did before I started writing the unit tests.</description>
    </item>
    
    <item>
      <title>Magento 2, Docker, and macOS don&#39;t mix</title>
      <link>https://thegeekspeaks.net/post/2017-01-11-magento-2-docker-and-macos-dont-mix/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2017-01-11-magento-2-docker-and-macos-dont-mix/</guid>
      <description>I was excited when the Docker team launched their better-integrated solution for running Docker containers on OS X this past summer. It allowed our team to switch from using full Vagrant/Virtual Box based virtual machines for local development to a much lighter-weight solution. Compared to the Vagrant setup, Magento 1 seemed to run a bit faster and require fewer resources when running in Docker.
However, when trying to setup a similar environment with Magento 2, the performance numbers didn&amp;rsquo;t quite line up when using a macOS host.</description>
    </item>
    
    <item>
      <title>Verify Magento User Access to Admin Functionality</title>
      <link>https://thegeekspeaks.net/post/2015-03-25-verify-magento-user-access-to-admin-functionality/</link>
      <pubDate>Wed, 25 Mar 2015 01:30:30 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-25-verify-magento-user-access-to-admin-functionality/</guid>
      <description>When working with Magento, there will inevitably come a time where you need to manually check to see if the currently logged-in user has access to a specific piece of functionality as defined in the ACL settings. Personally, I have come across this situation more often when creating my own custom modules and their custom permissions, but they can be used to check the permissions of any module.
As is so often the case, Alan Storm has documented the exact solution for this scenario.</description>
    </item>
    
    <item>
      <title>Laravel Removed The QuickStart For Version 5</title>
      <link>https://thegeekspeaks.net/post/2015-03-24-laravel-removed-the-quickstart-for-version-5/</link>
      <pubDate>Tue, 24 Mar 2015 01:14:22 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-24-laravel-removed-the-quickstart-for-version-5/</guid>
      <description>To start out, I want to be clear that what follows should not be interpreted to be a criticism of the software framework that those that work on Laravel publish, nor an indictment of open-source software as a whole. Rather, it is a look at how some projects, open or closed source make it harder than it should be for new users/developers to utilize their terrific products.
 It seems experts conveniently &amp;ldquo;forget&amp;rdquo; the tips and tricks and tribulations it takes to learn a new technology, covering it all with, &amp;ldquo;It&amp;rsquo;s just so easy&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Never Explicitly Trust Software Because It Is Open-Source</title>
      <link>https://thegeekspeaks.net/post/2015-03-13-never-explicitly-trust-software-because-it-is-open-source/</link>
      <pubDate>Fri, 13 Mar 2015 02:33:22 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-13-never-explicitly-trust-software-because-it-is-open-source/</guid>
      <description>One of the major ideas behind open source projects is that allowing anyone that wants to view the source code of a project to be able to do so should make bugs and security weaknesses easy to find. While this did not work so well with OpenSSL and its various bugs that have been exposed recently, I do have an example where it worked extremely well.
Magento is an eCommerce platform that has two separate editions.</description>
    </item>
    
    <item>
      <title>The Number 1 Cause of the Not Invented Here Syndrome</title>
      <link>https://thegeekspeaks.net/post/2015-03-12-the-number-1-cause-of-the-not-invented-here-syndrome/</link>
      <pubDate>Thu, 12 Mar 2015 02:44:18 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-12-the-number-1-cause-of-the-not-invented-here-syndrome/</guid>
      <description>One of the quickest ways to get a new internal tool bootstrapped is to utilize an existing design, making slight adjustments to ensure the design matches the requirements of the current project. Instead of using another internal tool as the basis for the new design, I used a design that was purchased specifically for this project.
This particular design was unique in that there were multiple working examples using AJAX, pure HTML, and AngularJS.</description>
    </item>
    
    <item>
      <title>The Amazing Magento Configuration</title>
      <link>https://thegeekspeaks.net/post/2015-03-06-the-amazing-magento-configuration/</link>
      <pubDate>Fri, 06 Mar 2015 03:17:46 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-06-the-amazing-magento-configuration/</guid>
      <description>At the heart of every piece of PHP in Magento is the XML configuration files that tell core Magento code where to find functions and what to do with them. It seems to be the biggest hurdle that most developers face when they begin developing with Magento.
When going through a bit of code recently, I discovered something in the configuration that looks like it should have never worked, but amazingly enough, has worked without issue the entire time it has been in place.</description>
    </item>
    
    <item>
      <title>Don&#39;t Be a Dunce, Save Your Orders</title>
      <link>https://thegeekspeaks.net/post/2015-03-05-dont-be-a-dunce-save-your-orders/</link>
      <pubDate>Thu, 05 Mar 2015 03:55:45 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-05-dont-be-a-dunce-save-your-orders/</guid>
      <description>There are some gotchas that you think that you will always see coming. One such gotcha is the need to save an object to the datastore to persist any changes you may have made to that object.
While it seems like a reasonable concept at the base level, there are times that the need to save an object completely escapes your mind. It seems that for many non-developers, this occurs when they have been working a long time on a file, typically a Microsoft Word document, shortly before their computer blue screens, losing all of their work.</description>
    </item>
    
    <item>
      <title>Magento&#39;s preDispatch Observer</title>
      <link>https://thegeekspeaks.net/post/2015-03-04-magentos-predispatch-observer/</link>
      <pubDate>Wed, 04 Mar 2015 03:10:36 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-04-magentos-predispatch-observer/</guid>
      <description>One of the decisions that always seems to arise when adding functionality to a Magento website is what the best strategy is for doing so. Should you override the controller or function, edit it in place, or use an observer to listen for a particular event to occur.
It just so happens that if you want to make sure that you have some sort of validation logic that runs before a particular controller action is executed, the easiest way to implement it is via a preDispatch observer.</description>
    </item>
    
    <item>
      <title>Avoid &#39;Persistent storage maximum size reached&#39; in Firefox</title>
      <link>https://thegeekspeaks.net/post/2015-03-03-avoid-persistent-storage-maximum-size-reached-in-firefox/</link>
      <pubDate>Tue, 03 Mar 2015 04:37:37 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-03-avoid-persistent-storage-maximum-size-reached-in-firefox/</guid>
      <description>One of the nice tools out there for tracking down issues that your website&amp;rsquo;s visitors are having is TrackJS. We started noticing the other day that we were getting overwhelmed by errors with the text Persistent storage maximum size reached for our Magento site. When we looked further into the issue, it quickly became obvious that all of the errors originated from a single user that was running Firefox.
It quickly became obvious that there was a single user that had exhausted their localStorage resources on their browser, but why was it only one user?</description>
    </item>
    
    <item>
      <title>Authorize.Net Directpost is Overly Complex</title>
      <link>https://thegeekspeaks.net/post/2015-01-09-authorize-net-directpost-is-overly-complex/</link>
      <pubDate>Fri, 09 Jan 2015 04:14:16 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-01-09-authorize-net-directpost-is-overly-complex/</guid>
      <description>One of the necessary evils that every ecommerce website that wants to accept credit card transactions must deal with is some sort of payment processing company. It just so happens that Authorize.net is one of the largest payment processors around, and they allow you to choose from a few different ways to integrate their payment processing functionality into your website. One of their ways is via DirectPost, which allows an eCommerce website to process a credit card transaction without the credit card information ever being sent through the website&amp;rsquo;s servers.</description>
    </item>
    
    <item>
      <title>Hackers Exploiting Gullible Magento Site Administrators</title>
      <link>https://thegeekspeaks.net/post/2014-07-29-hackers-exploiting-gullible-magento-site-administrators/</link>
      <pubDate>Tue, 29 Jul 2014 01:15:26 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-07-29-hackers-exploiting-gullible-magento-site-administrators/</guid>
      <description>Nexcess recently released a report of a Recent Exploit using Fake Magento Extensions was able to skim credit card information from affected Magento websites. While it seems that some of the stores were breached by correctly guessing simple admin usernames and passwords, others seemed to be the result of site administrators installing Magento Extensions that included backdoors that gave the hackers remote access to the website. Once the backdoor was installed, the hackers went on to modify core Magento files, ensuring that when a credit card order was placed, the credit card information would be saved to a text file that was hidden with an image file name extension .</description>
    </item>
    
    <item>
      <title>Orphaned Attribute Data in Magento</title>
      <link>https://thegeekspeaks.net/post/2014-06-18-orphaned-attribute-data-in-magento/</link>
      <pubDate>Wed, 18 Jun 2014 01:34:27 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-06-18-orphaned-attribute-data-in-magento/</guid>
      <description>Its always entertaining to look at the source of an application that originates from outside your organization. It frequently highlights ways of using technology I was not familiar with beforehand, and sometimes leaves me shaking my head in disgust. I initially started looking at a relatively new third-party module thinking that I would find some sort of major bug that was causing the issues the site was experiencing, but was surprised to find that was not the case.</description>
    </item>
    
    <item>
      <title>Defensive Development - Fail Fast or Go Home</title>
      <link>https://thegeekspeaks.net/post/2014-06-02-defensive-development-fail-fast-or-go-home/</link>
      <pubDate>Mon, 02 Jun 2014 02:07:32 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-06-02-defensive-development-fail-fast-or-go-home/</guid>
      <description>Defensive Development is a programming practice that is frequently misunderstood, but is nevertheless a critical practice to follow when working in many environments. I have seen articles written that argue that defensive development simply causes nonsensical null checks to be written, and as a result of seeing people writing bad code defensively, argues that no one should practice defensive development. There are other articles that, like many things in software development, argue that you should always use defensive development for everything.</description>
    </item>
    
    <item>
      <title>Unintended Consequences with Magento Observers on Sales Orders</title>
      <link>https://thegeekspeaks.net/post/2014-05-06-unintended-consequences-with-magento-observers-on-sales-orders/</link>
      <pubDate>Tue, 06 May 2014 01:59:59 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-05-06-unintended-consequences-with-magento-observers-on-sales-orders/</guid>
      <description>Anyone that uses Magento to place orders will be hard-pressed to consider this process a speedy one. While it takes a while to process the order under the best of circumstances, there are a few things that you can do that actually make it worse.
One of those things that can make it worse is creating an observer that runs in the middle of the saving of the order processes that is always slow-running, or continues to get slower over time as the data that the Magento site grows.</description>
    </item>
    
    <item>
      <title>Magento Version 2, is it just Microsoft Windows Longhorn AKA Vista?</title>
      <link>https://thegeekspeaks.net/post/2014-05-02-magento-version-2-is-it-just-microsoft-windows-longhorn-aka-vista/</link>
      <pubDate>Fri, 02 May 2014 02:10:03 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-05-02-magento-version-2-is-it-just-microsoft-windows-longhorn-aka-vista/</guid>
      <description>Magento version 2 was first introduced in 2010. It is now almost halfway through 2014, and the public has not seen any alpha or beta release of Magento version 2 as of yet. The new version of Magento promised to replace PrototypeJS and Scriptaculus with jQuery as well as reorganize the database schema to remove the slow EAV tables and migrate to a bit of a flatter table structure. However, it seems that the latest updates on the direction for Magento 2 show that the database schema will not be changed much after all.</description>
    </item>
    
    <item>
      <title>Optimizing Website Load Time</title>
      <link>https://thegeekspeaks.net/post/2014-04-25-optimizing-website-load-time/</link>
      <pubDate>Fri, 25 Apr 2014 02:26:35 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-04-25-optimizing-website-load-time/</guid>
      <description>Assuming you have already done a few things to improve the page load time of your website, such as using a Varnish caching server, GZipping your content in transit, minifying that same content, and turning on all caching options that Magento or your web platform of choice have available, there is still more you can do. When it comes to website performance, the 80/20 rule definitely applies. 80% of the performance tweaks that you perform will only provide a miniscule improvement to the site load time, while the 20% of things you do make a big difference.</description>
    </item>
    
    <item>
      <title>Optimize Magento Time To First Byte</title>
      <link>https://thegeekspeaks.net/post/2014-04-24-optimize-magento-time-to-first-byte/</link>
      <pubDate>Thu, 24 Apr 2014 00:41:34 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-04-24-optimize-magento-time-to-first-byte/</guid>
      <description>When looking at the performance of your site, waterfall charts are one of the first places you should investigate. The first thing that is represented on these charts is that the HTML for the website is the first resource that is downloaded every time.
As a result of being the first resource downloaded every time, this is the logical first place to look to improve the performance of your Magento website.</description>
    </item>
    
    <item>
      <title>Magento Adminhtml and Relative Links to Static Resources</title>
      <link>https://thegeekspeaks.net/post/2014-04-18-magento-adminhtml-and-relative-links-to-static-resources/</link>
      <pubDate>Fri, 18 Apr 2014 02:34:27 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-04-18-magento-adminhtml-and-relative-links-to-static-resources/</guid>
      <description>Relative links in URLs allow you to only specify the path to an resource that is in the same or subfolder of the current folder. Lets say the current page you are on is http://example.com/test/ and you want to reference an image at http://example.com/test/image.jpg. You could put the full http://example.com/test/image.jpg in the src attribute of the img tag, or you could use just image.jpg instead. This works well when you are not sure what the directory path is the parent directory of your code.</description>
    </item>
    
    <item>
      <title>MySQL Deadlocks with Magento</title>
      <link>https://thegeekspeaks.net/post/2014-04-17-mysql-deadlocks-with-magento/</link>
      <pubDate>Thu, 17 Apr 2014 04:32:47 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-04-17-mysql-deadlocks-with-magento/</guid>
      <description>One of the things that Magento, and specifically the Zend Framework provide developers is the ability to not have to think about database details as it should just handle all that for you. When it becomes obvious that there is a problem somehow with the production database getting some sort of SQL errors, its time for the developers to start caring about the implementation and architecture details of the database. ##Symptoms One of the indicators of upcoming troubles is that your admin users start to get error messages saying that there are deadlocks in the transactions.</description>
    </item>
    
    <item>
      <title>Varnish and Magento Performance Mystery</title>
      <link>https://thegeekspeaks.net/post/2014-04-14-varnish-and-magento-performance-mystery/</link>
      <pubDate>Mon, 14 Apr 2014 21:43:02 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-04-14-varnish-and-magento-performance-mystery/</guid>
      <description>One of the things that you think you will solve when you implement a Varnish caching server in front of a Magento website is performance problems. However, this is not necessarily the case.
When I set Varnish up to cache content in front of my Magento website, I get what seems to be much improved performance. If I run a few tests in the developer tools of Chrome, it seems that the waterfall chart makes sense and the data is loaded appropriately and in a timely manner with the main HTML being downloaded in about 300ms.</description>
    </item>
    
    <item>
      <title>Saving Products in Magento Deletes Tier Pricing</title>
      <link>https://thegeekspeaks.net/post/2014-04-06-saving-products-in-magento-deletes-tier-pricing/</link>
      <pubDate>Sun, 06 Apr 2014 21:06:00 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-04-06-saving-products-in-magento-deletes-tier-pricing/</guid>
      <description>Magento&amp;rsquo;s framework makes many things simple to accomplish when working with the products and categories of your eCommerce website. However, I have found one scenario that doesn&amp;rsquo;t exactly work as expected. ##Tier Pricing in Magento Magento allows you to setup custom pricing levels based upon the quantity purchased. You set the minimum quantity purchased to enable the lower price when the part is added to the customer&amp;rsquo;s cart. You could see where losing the tiered pricing for an entire catalog of products would be a big deal for a site.</description>
    </item>
    
    <item>
      <title>Creating a Best-Sellers Category with Magento</title>
      <link>https://thegeekspeaks.net/post/2014-04-04-creating-a-best-sellers-category-with-magento/</link>
      <pubDate>Fri, 04 Apr 2014 02:06:35 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-04-04-creating-a-best-sellers-category-with-magento/</guid>
      <description>Magento allows you to organize products in categories, and a single product can be a member of quite a few separate categories. As a result, you can create a category that is specifically for your top selling products. You could manually keep track of which products sell the best, either by number of sales completed, or by the actual quantity of each product that were sold. If you want to spend all your time managing this category, then this is the way to go.</description>
    </item>
    
    <item>
      <title>Login Problems with Magento and Varnish</title>
      <link>https://thegeekspeaks.net/post/2014-03-30-login-problems-with-magento-and-varnish/</link>
      <pubDate>Sun, 30 Mar 2014 02:30:43 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-03-30-login-problems-with-magento-and-varnish/</guid>
      <description>When you have a Magento website configured to use Varnish as a caching frontend, there are certain scenarios where you may have some problems logging-in to the frontend of the website. It poses some unique problems that are not frequently seen on a typical website. This issue typically manifests itself to the end user by visiting the login page, entering the correct credential, submitting the form, and then the page reloads the login page again instead of redirecting to the My Account page or whatever page is specified in the configuration.</description>
    </item>
    
    <item>
      <title>301 Redirecting in Varnish</title>
      <link>https://thegeekspeaks.net/post/2014-03-29-301-redirecting-in-varnish/</link>
      <pubDate>Sat, 29 Mar 2014 02:42:50 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-03-29-301-redirecting-in-varnish/</guid>
      <description>In Magento, you can set your secure and non-secure URLs explicitly. This works as expected in most cases, but can cause some issues when you have to specify full URLs or need to make any AJAX requests. When using the Nexcess Turpentine extension to enable Magento and Varnish to work together and you wish to only support traffic at www.example.com and not example.com, you would need to enable the setting in the Turpentine module to normalize the host.</description>
    </item>
    
    <item>
      <title>Launching a Redesign of a Website</title>
      <link>https://thegeekspeaks.net/post/2014-03-28-launching-a-redesign-of-a-website/</link>
      <pubDate>Fri, 28 Mar 2014 02:00:53 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-03-28-launching-a-redesign-of-a-website/</guid>
      <description>Over the last few months, I have been working on a major redesign of an existing Magento website. One of the major goals of the redesign was to take a legacy desktop-only website and upgrade it to take full advantage of Responsive Web Design so that customers could equally utilize mobile and desktop devices to browse and purchase products.
For a site that had seen only minor updates over the last 5 years, this redesign represented a major change visually and navigationally from the previous site.</description>
    </item>
    
    <item>
      <title>Magento FrontName Naming and SSL/HTTPS</title>
      <link>https://thegeekspeaks.net/post/2014-03-26-magento-frontname-naming-and-sslhttps/</link>
      <pubDate>Wed, 26 Mar 2014 03:03:25 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-03-26-magento-frontname-naming-and-sslhttps/</guid>
      <description>One of the things that has always been an issue for sites that are based on Magento is that they are slow. Well, to be fair, sites using Magento Enterprise Edition that take advantage of the built-in full-page caching functionality seem to have decent page load times. One way to take care of this slow load time issue is to utilize a third-party full-page caching solution such as what Varnish provides.</description>
    </item>
    
    <item>
      <title>Magento Cache with Cache Disabled</title>
      <link>https://thegeekspeaks.net/post/2014-03-25-magento-cache-with-cache-disabled/</link>
      <pubDate>Tue, 25 Mar 2014 02:02:20 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-03-25-magento-cache-with-cache-disabled/</guid>
      <description>One of the things that I find quite annoying with a web platform is when you configure it to do one thing, and it does something different. Magento is an eCommerce software platform that many of the leading eCommerce websites use for their web stores. ##Magento Magento comes in two different flavors, a paid enterprise edition as well as a open-source community edition. The enterprise edition allows you to utilize the built-in full-page caching mechanism, while the community edition does not include a full-page caching solution.</description>
    </item>
    
  </channel>
</rss>