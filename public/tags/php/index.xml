<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on The Geek Speaks</title>
    <link>https://thegeekspeaks.net/tags/php/</link>
    <description>Recent content in php on The Geek Speaks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2015 01:46:25 +0000</lastBuildDate>
    
	<atom:link href="https://thegeekspeaks.net/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Optimize Wide To Narrow</title>
      <link>https://thegeekspeaks.net/post/2015-03-30-optimize-wide-to-narrow/</link>
      <pubDate>Mon, 30 Mar 2015 01:46:25 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-30-optimize-wide-to-narrow/</guid>
      <description>If you consider the path that a user takes through your website from landing page to successful conversion, you can think of the number of users that make it to each point along the way to a successful conversion as similarly shaped to that of a funnel. In a typical setup, you may have a very small percentage of your users make it to a successful conversion, but there are several areas along the way that either improve the chances the user will convert or decrease those chances.</description>
    </item>
    
    <item>
      <title>2 Ways To Find Current Directory in PHP Without Regular Expressions</title>
      <link>https://thegeekspeaks.net/post/2015-03-27-2-ways-to-find-current-directory-in-php-without-regular-expressions/</link>
      <pubDate>Fri, 27 Mar 2015 02:23:27 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-27-2-ways-to-find-current-directory-in-php-without-regular-expressions/</guid>
      <description>There comes a time when you need to find the current directory in PHP, test to see if it is the directory that you expect it is, and take an action based on the test results. Obviously, the easiest way to get the current working directory in PHP is getcwd(). However, parsing the output of this function can provide some interesting challenges.
While it is trivial to do this sort of search with a Regular Expression, I tend to look for a solution that is easier to understand its functionality without reaching for the reference books.</description>
    </item>
    
    <item>
      <title>Another Micro-Optimization Provides Useless Results</title>
      <link>https://thegeekspeaks.net/post/2015-03-26-another-micro-optimization-provides-useless-results/</link>
      <pubDate>Thu, 26 Mar 2015 03:38:36 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-26-another-micro-optimization-provides-useless-results/</guid>
      <description>One of the things to remember about performance optimizations performed in isolation is that their results are rarely representative of real-world performance results. This article outlines the &amp;ldquo;findings&amp;rdquo; of the students at a couple of Canadian universities, and comes to the conclusion that string concatenation in memory is slower than writing the same total number of bytes to disk, one after the other.
 String concatenation is a slow and CPU-heavy operation.</description>
    </item>
    
    <item>
      <title>Verify Magento User Access to Admin Functionality</title>
      <link>https://thegeekspeaks.net/post/2015-03-25-verify-magento-user-access-to-admin-functionality/</link>
      <pubDate>Wed, 25 Mar 2015 01:30:30 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-25-verify-magento-user-access-to-admin-functionality/</guid>
      <description>When working with Magento, there will inevitably come a time where you need to manually check to see if the currently logged-in user has access to a specific piece of functionality as defined in the ACL settings. Personally, I have come across this situation more often when creating my own custom modules and their custom permissions, but they can be used to check the permissions of any module.
As is so often the case, Alan Storm has documented the exact solution for this scenario.</description>
    </item>
    
    <item>
      <title>Laravel Removed The QuickStart For Version 5</title>
      <link>https://thegeekspeaks.net/post/2015-03-24-laravel-removed-the-quickstart-for-version-5/</link>
      <pubDate>Tue, 24 Mar 2015 01:14:22 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-24-laravel-removed-the-quickstart-for-version-5/</guid>
      <description>To start out, I want to be clear that what follows should not be interpreted to be a criticism of the software framework that those that work on Laravel publish, nor an indictment of open-source software as a whole. Rather, it is a look at how some projects, open or closed source make it harder than it should be for new users/developers to utilize their terrific products.
 It seems experts conveniently &amp;ldquo;forget&amp;rdquo; the tips and tricks and tribulations it takes to learn a new technology, covering it all with, &amp;ldquo;It&amp;rsquo;s just so easy&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Google Code Shutting Down</title>
      <link>https://thegeekspeaks.net/post/2015-03-16-google-code-shutting-down/</link>
      <pubDate>Mon, 16 Mar 2015 02:40:08 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-16-google-code-shutting-down/</guid>
      <description>Google just recently announced that they are going to begin the process of shutting down their Google Code project hosting service. In the blog post announcing that they were shuttering the service, they let it slip that even Google had quit using Google Code for their project hosting, instead transitioning thousands of their projects to GitHub. Google seemingly blames the fact that GitHub and BitBucket handle project hosting better than Google does as the main reason that they are discontinuing the service.</description>
    </item>
    
    <item>
      <title>Never Explicitly Trust Software Because It Is Open-Source</title>
      <link>https://thegeekspeaks.net/post/2015-03-13-never-explicitly-trust-software-because-it-is-open-source/</link>
      <pubDate>Fri, 13 Mar 2015 02:33:22 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-13-never-explicitly-trust-software-because-it-is-open-source/</guid>
      <description>One of the major ideas behind open source projects is that allowing anyone that wants to view the source code of a project to be able to do so should make bugs and security weaknesses easy to find. While this did not work so well with OpenSSL and its various bugs that have been exposed recently, I do have an example where it worked extremely well.
Magento is an eCommerce platform that has two separate editions.</description>
    </item>
    
    <item>
      <title>The Number 1 Cause of the Not Invented Here Syndrome</title>
      <link>https://thegeekspeaks.net/post/2015-03-12-the-number-1-cause-of-the-not-invented-here-syndrome/</link>
      <pubDate>Thu, 12 Mar 2015 02:44:18 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-12-the-number-1-cause-of-the-not-invented-here-syndrome/</guid>
      <description>One of the quickest ways to get a new internal tool bootstrapped is to utilize an existing design, making slight adjustments to ensure the design matches the requirements of the current project. Instead of using another internal tool as the basis for the new design, I used a design that was purchased specifically for this project.
This particular design was unique in that there were multiple working examples using AJAX, pure HTML, and AngularJS.</description>
    </item>
    
    <item>
      <title>Authenticate Magento Admin Users</title>
      <link>https://thegeekspeaks.net/post/2015-03-10-authenticate-magento-admin-users/</link>
      <pubDate>Tue, 10 Mar 2015 01:23:43 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-10-authenticate-magento-admin-users/</guid>
      <description>Magento&amp;rsquo;s admin interface allows you to do the vast majority of everything that you would ever want to do to manage your eCommerce website. However, there are times when the rigidity of the framework makes it difficult for developers to appropriately customize a layout.
One of the things that we have done to combat these limitations is to create a new administration section of the website specifically for the use of developers and other advanced administrators of the site.</description>
    </item>
    
    <item>
      <title>Don&#39;t Be a Dunce, Save Your Orders</title>
      <link>https://thegeekspeaks.net/post/2015-03-05-dont-be-a-dunce-save-your-orders/</link>
      <pubDate>Thu, 05 Mar 2015 03:55:45 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-05-dont-be-a-dunce-save-your-orders/</guid>
      <description>There are some gotchas that you think that you will always see coming. One such gotcha is the need to save an object to the datastore to persist any changes you may have made to that object.
While it seems like a reasonable concept at the base level, there are times that the need to save an object completely escapes your mind. It seems that for many non-developers, this occurs when they have been working a long time on a file, typically a Microsoft Word document, shortly before their computer blue screens, losing all of their work.</description>
    </item>
    
    <item>
      <title>Magento&#39;s preDispatch Observer</title>
      <link>https://thegeekspeaks.net/post/2015-03-04-magentos-predispatch-observer/</link>
      <pubDate>Wed, 04 Mar 2015 03:10:36 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2015-03-04-magentos-predispatch-observer/</guid>
      <description>One of the decisions that always seems to arise when adding functionality to a Magento website is what the best strategy is for doing so. Should you override the controller or function, edit it in place, or use an observer to listen for a particular event to occur.
It just so happens that if you want to make sure that you have some sort of validation logic that runs before a particular controller action is executed, the easiest way to implement it is via a preDispatch observer.</description>
    </item>
    
    <item>
      <title>PHP serialize/unserialize is faster than json_encode/json_decode</title>
      <link>https://thegeekspeaks.net/post/2014-08-18-php-serializeunserialize-is-faster-than-json_encodejson_decode/</link>
      <pubDate>Mon, 18 Aug 2014 01:18:13 +0000</pubDate>
      
      <guid>https://thegeekspeaks.net/post/2014-08-18-php-serializeunserialize-is-faster-than-json_encodejson_decode/</guid>
      <description>One of the things that I tend to focus on with a website is how quickly everything loads and executes. However, that focus can sometimes get to be a bit too narrow, only considering the performance of those resources that are required for the initial page load, and not for other dynamic aspects of the site. We recently implemented New Relic on one site, and gained much insight into how long each aspect of our site took to load, and how long each of the most popular requests took to execute.</description>
    </item>
    
  </channel>
</rss>